{"version":3,"sources":["components/Header.js","components/Navbar.js","components/Card.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Navbar","props","text","score","highScore","Card","src","image","alt","id","onClick","clickMe","Wrapper","children","App","state","images","clicked","includes","setState","newClick","shuffleImages","i","length","j","Math","floor","random","shuffle","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k9CAWeA,MATf,WACI,OACI,yBAAKC,UAAU,UACX,wDACA,qF,MCQGC,MAXf,SAAgBC,GACZ,OACI,6BACI,yBAAKF,UAAU,oBACX,4BAAKE,EAAMC,MACX,sCAAYD,EAAME,MAAlB,iBAAuCF,EAAMG,c,MCO9CC,MAZf,SAAcJ,GACV,OACI,yBAAKF,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,QACX,yBAAKO,IAAKL,EAAMM,MAAOC,IAAKP,EAAMQ,GAAIC,QAAS,kBAAMT,EAAMU,QAAQV,EAAMQ,WCM9EG,MAXf,SAAiBX,GACb,OACI,yBAAKF,UAAU,aACX,yBAAKA,UAAU,OACVE,EAAMY,Y,OCiERC,E,2MA9DbC,MAAQ,CACNC,SACAb,MAAO,EACPC,UAAW,EACXa,QAAS,GACTf,KAAM,I,EAGRS,QAAU,SAAAF,GACJ,EAAKM,MAAME,QAAQC,SAAST,IAC9B,EAAKU,SAAS,CAAEjB,KAAM,uCAClB,EAAKa,MAAMX,UAAY,EAAKW,MAAMZ,OACpC,EAAKgB,SAAS,CAAEf,UAAW,EAAKW,MAAMZ,QAExC,EAAKgB,SAAS,CAACF,QAAS,KACxB,EAAKE,SAAS,CAAChB,MAAO,MAGtB,EAAKgB,SAAS,CAACjB,KAAM,gBACrB,EAAKiB,SAAS,CAAChB,MAAO,EAAKY,MAAMZ,MAAQ,IACzC,EAAKgB,SAAS,CAACF,QAAS,CAAC,EAAKF,MAAME,QAASR,MAI/C,IAAMW,EAAW,EAAKL,MAAMC,OAC5B,EAAKK,cAAcD,I,EAGrBC,cAAgB,SAAAD,GACd,IAAK,IAAIE,EAAIF,EAASG,OAAQ,EAAGD,EAAE,EAAGA,IAAI,CACxC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAE,IAClCM,EAAUR,EAASE,GACzBF,EAASE,GAAKF,EAASI,GACvBJ,EAASI,GAAKI,I,wEAIR,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACE1B,KAAM2B,KAAKd,MAAMb,KACjBC,MAAO0B,KAAKd,MAAMZ,MAClBC,UAAWyB,KAAKd,MAAMX,YACxB,yBAAKL,UAAU,yBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACG8B,KAAKd,MAAMC,OAAOc,KAAI,SAAAvB,GAAK,OAC1B,kBAAC,EAAD,CACEE,GAAIF,EAAME,GACVsB,IAAKxB,EAAME,GACXF,MAAOA,EAAMA,MACbI,QAAS,EAAKA,oB,GArDZqB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.91c96935.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/header.css\"\nfunction Header(){\n    return(\n        <div className=\"header\">\n            <h1>Welcome to Clicky Game!!</h1>\n            <p>Click the picture to get point but no more than once</p>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport \"../styles/navbar.css\"\n\nfunction Navbar(props){\n    return(\n        <div>\n            <nav className=\"navbar fixed-top\">\n                <h3>{props.text}</h3>\n                <h3>Score: {props.score} | Top Score: {props.highScore}</h3>\n            </nav>\n        </div>\n    )\n}\n\nexport default Navbar","import React from \"react\";\nimport \"../styles/card.css\"\n\nfunction Card(props){\n    return(\n        <div className=\"row\">\n            <div className=\"col-md-1\">\n                <div className=\"card\">\n                    <img src={props.image} alt={props.id} onClick={() => props.clickMe(props.id)}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\n\n\nfunction Wrapper(props){\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport images from \"./images.json\"\n\n\nclass App extends Component {\n  state = {\n    images,\n    score: 0,\n    highScore: 0,\n    clicked: [],\n    text: \"\"\n  }\n\n  clickMe = id => {\n    if (this.state.clicked.includes(id)) {\n      this.setState({ text: \"Ehh, you picked the picture twice.\" })\n      if (this.state.highScore < this.state.score) {\n        this.setState({ highScore: this.state.score })\n      };\n      this.setState({clicked: []})\n      this.setState({score: 0})\n    }\n    else {\n      this.setState({text: \"Here we go!\" })\n      this.setState({score: this.state.score + 1 })\n      this.setState({clicked: [this.state.clicked, id] })\n    }\n\n    \n    const newClick = this.state.images\n    this.shuffleImages(newClick)\n  };\n\n  shuffleImages = newClick => {\n    for (var i = newClick.length -1; i>0; i--){\n      const j = Math.floor(Math.random() * (i+1))\n      const shuffle = newClick[i];\n      newClick[i] = newClick[j];\n      newClick[j] = shuffle\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          text={this.state.text}\n          score={this.state.score}\n          highScore={this.state.highScore} />\n        <div className=\"jumbotron text-center\">\n          <Header/>\n          <Wrapper>\n            {this.state.images.map(image => (\n              <Card\n                id={image.id}\n                key={image.id}\n                image={image.image}\n                clickMe={this.clickMe}\n              />\n            ))}\n          </Wrapper>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}